/**
 * SongBrowserWindow.java
 *
 * Window that allows users to view all the songs in the database.
 *
 * Users can search for songs by exact title and change popularity of
 * each song in this window.
 *
 * SongBrowserWindow is also used to select songs to be added to a schedule.
 *
 * TODO: Remove coupling with SchedulerListWindow for adding.
 * TODO: Improve search to allow partials.
 * 
 * @author Jordan Wiebe
 */
package gui;

import java.util.ArrayList;
import javax.swing.*;
import model.*;

public class SongBrowserWindow extends javax.swing.JFrame {

    private ArrayList songs;
    private DefaultListModel listModel;
    private JFrame parentWindow;

    /**
     * Constructor
     *
     * @param parentWindow - The parent of this window
     */
    public SongBrowserWindow ( JFrame parentWindow ) {
        this.parentWindow = parentWindow;
        Song currSong;
        songs = Database.getSongs();
        listModel = new DefaultListModel();
        initComponents();

        for ( int i = 0; i < songs.size(); i++ ) {
            currSong = (Song) songs.get( i );
            listModel.add( i, currSong );
        }

        songList.setModel( listModel );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        songNameText = new javax.swing.JTextField();
        songNameLabel = new javax.swing.JLabel();
        songSearchButton = new javax.swing.JButton();
        songListScrollPane = new javax.swing.JScrollPane();
        songList = new javax.swing.JList();
        selectedSongInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        songPopularityDisplay = new javax.swing.JTextField();
        songLastPlayedDisplay = new javax.swing.JLabel();
        songPlayCountDisplay = new javax.swing.JLabel();
        songLengthDisplay = new javax.swing.JLabel();
        songYearDisplay = new javax.swing.JLabel();
        songGenreDisplay = new javax.swing.JLabel();
        songAlbumDisplay = new javax.swing.JLabel();
        songArtistDisplay = new javax.swing.JLabel();
        songNameDisplay = new javax.swing.JLabel();
        doneButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        songNameLabel.setText("Song Name: ");

        songSearchButton.setText("Search");
        songSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songSearchButtonActionPerformed(evt);
            }
        });

        songList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        songList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                songListValueChanged(evt);
            }
        });
        songListScrollPane.setViewportView(songList);

        jLabel1.setText("Song Name:");

        jLabel2.setText("Artist:");

        jLabel3.setText("Album:");

        jLabel4.setText("Genre:");

        jLabel5.setText("Year:");

        jLabel6.setText("Length:");

        jLabel7.setText("Play count:");

        jLabel8.setText("Last played:");

        jLabel9.setText("Popularity:");

        org.jdesktop.layout.GroupLayout selectedSongInfoPanelLayout = new org.jdesktop.layout.GroupLayout(selectedSongInfoPanel);
        selectedSongInfoPanel.setLayout(selectedSongInfoPanelLayout);
        selectedSongInfoPanelLayout.setHorizontalGroup(
            selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectedSongInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(songYearDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(songGenreDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(songAlbumDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(songLengthDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(songArtistDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(songNameDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)))
                .addContainerGap(251, Short.MAX_VALUE))
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .add(selectedSongInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(songPlayCountDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(songLastPlayedDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(songPopularityDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                .addContainerGap(445, Short.MAX_VALUE))
        );
        selectedSongInfoPanelLayout.setVerticalGroup(
            selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectedSongInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(songNameDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(songArtistDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(songAlbumDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(songGenreDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(songYearDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(songLengthDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(songPlayCountDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(songLastPlayedDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(songPopularityDisplay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(songListScrollPane, 0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(songNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(songNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(79, 79, 79)
                        .add(songSearchButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(doneButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectedSongInfoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(songNameLabel)
                            .add(songNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(doneButton)
                            .add(songSearchButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(songListScrollPane))
                    .add(selectedSongInfoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * doneButtonActionPerformed
     *
     * Closes the window.
     *
     * If the parent is of type SchedulerListWindow, the selected song is added.
     * TODO: Remove this coupling if possible and practical.
     * 
     * @param evt
     * @return void
     */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        this.setVisible( false );
        this.dispose();
        if ( parentWindow != null ) {
            parentWindow.setVisible( true );
            if ( parentWindow instanceof SchedulerListWindow ) {
                if ( songList.getSelectedIndex() != -1 ) {
                    ( (SchedulerListWindow) parentWindow ).addSong( (Song) songs.get( songList.getSelectedIndex() ) );
                }
            }
        } else {
            System.exit( 0 );
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    /**
     * songListValueChanged
     *
     * Updates the view panel when selected value is changed.
     * 
     * @param evt
     * @return void
     */
    private void songListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_songListValueChanged
        updateViewPanel();
    }//GEN-LAST:event_songListValueChanged

    /**
     * updateViewPanel
     *
     * Gets the selected song and updates all the labels to the new songs values.
     *
     * @return void
     */
    private void updateViewPanel () {
        Song selection = (Song) songs.get( songList.getSelectedIndex() );
        int milliseconds = selection.getLength();
        int minutes = milliseconds / 60000;
        int seconds = ( milliseconds - ( minutes * 60000 ) ) / 1000;
        String length = minutes + ":";
        if ( seconds < 10 ) {
            length += "0" + seconds;
        } else {
            length += seconds;
        }

        songLengthDisplay.setText( length );
        songAlbumDisplay.setText( selection.getRecordingTitle() );
        songArtistDisplay.setText( selection.getPerformer() );
        songGenreDisplay.setText( selection.getRecordingType() );
        songLastPlayedDisplay.setText( selection.getLastPlayed().toString() );
        songNameDisplay.setText( selection.getTitle() );
        songNameText.setText( selection.getTitle() );
        songPlayCountDisplay.setText( selection.getNumberOfPlays() + "" );
        songPopularityDisplay.setText( selection.getPopularity() + "" );
        songYearDisplay.setText( selection.getYear() );
    }

    /**
     * songSearchButtonActionPerformed
     *
     * Searches for an exact match for the song title in songNameText field.
     * Updates the information fields if song is found.
     *
     * TODO: Partial searches.
     * TODO: Jump to song found -or- Only show songs that fit search
     *
     * @param evt
     */
    private void songSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songSearchButtonActionPerformed
        String searchTerm = songNameText.getText();
        ArrayList searchResults;
        Song songFound;
        int index = 0;

        if ( !searchTerm.equals( "" ) ) {
            searchResults = Database.getSongs( searchTerm, null, null, null );
            if ( !searchResults.isEmpty() ) {
                songFound = (Song) searchResults.get( 0 );

                while ( index < songs.size() ) {
                    if ( songFound.getTitle().equals( ( (Song) songs.get( index ) ).getTitle() ) ) {
                        songList.setSelectedIndex( index );
                        index = songs.size();
                    }
                    index++;
                }
            } else {
                System.out.println( "No Song Found" );
            }
        } else {
            System.out.println( "No song title entered" );
        }

    }//GEN-LAST:event_songSearchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel selectedSongInfoPanel;
    private javax.swing.JLabel songAlbumDisplay;
    private javax.swing.JLabel songArtistDisplay;
    private javax.swing.JLabel songGenreDisplay;
    private javax.swing.JLabel songLastPlayedDisplay;
    private javax.swing.JLabel songLengthDisplay;
    private javax.swing.JList songList;
    private javax.swing.JScrollPane songListScrollPane;
    private javax.swing.JLabel songNameDisplay;
    private javax.swing.JLabel songNameLabel;
    private javax.swing.JTextField songNameText;
    private javax.swing.JLabel songPlayCountDisplay;
    private javax.swing.JTextField songPopularityDisplay;
    private javax.swing.JButton songSearchButton;
    private javax.swing.JLabel songYearDisplay;
    // End of variables declaration//GEN-END:variables
}
