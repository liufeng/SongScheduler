/**
 * SchedulerListWindow.java
 *
 * Window contains a tabbed pane which holds a DayScheduleScrollPanel for each
 * day sent to the constructor.
 *
 * Passes messages to the appropriate dayScheduleScrollPanel when buttons are
 * pushed. Includes: delete selected, add song, and generate schedule.
 *
 * Also passes commit functions to each DayScheduleScrollPanel when the done
 * button is pressed.  If all functions return fine then window will return.
 * Otherwise user is left to fix the errors or have the system do it for them.
 *
 * @author Kurtis Schmidt & Jordan Wiebe
 */
package gui;

// local imports
import model.*;

// Java imports
import javax.swing.JOptionPane;

public class SchedulerListWindow extends javax.swing.JFrame {

    private SongSchedulerWindow parentWindow;
    private SongScheduler songScheduler;

    /**
     * Constructor
     *
     * @param days - Array of days that should be displayed.
     * @param parentWindow - Parent window of this container.
     */
    public SchedulerListWindow ( Time days[], SongSchedulerWindow parentWindow ) {
        setupWindow( days, new SongScheduler( days[0] ), parentWindow );
    }

    /**
     * Constructor
     *
     * @param days - Array of days that should be displayed.
     * @param songScheduler - Pre-made songScheduler object.
     * @param parentWindow - Parent window of this container.
     */
    public SchedulerListWindow ( Time days[], SongScheduler songScheduler, SongSchedulerWindow parentWindow ) {
        setupWindow( days, songScheduler, parentWindow );
    }

    /**
     * setupWindow
     *
     * This sets up the window. It is called by any constructor to improve on
     * code reuse.
     *
     * @param days - Array of days that should be displayed.
     * @param songScheduler - Pre-made songScheduler object.
     * @param parentWindow - Parent window of this container.
     */
    private void setupWindow ( Time days[], SongScheduler songScheduler, SongSchedulerWindow parentWindow ) {
        this.songScheduler = songScheduler;
        this.parentWindow = parentWindow;
        initComponents();

        // Create a new hourSchedulePanel for every day in the array.
        for ( int i = 0; i < days.length; i++ ) {
            Time currentTime = days[i];
            scheduleTabPane.addTab( currentTime.getDateAsString(), null, new DayScheduleScrollPanel( songScheduler, currentTime ), "A panel of some sort" );
        }
    }

    /**
     * checkSchedules
     *
     * Checks the status of every DayScheduleScrollPanel.
     *
     * @return True if all schedules are good, false otherwise.
     */
    private boolean checkSchedules () {
        boolean result = true;
        for ( int i = 0; i < scheduleTabPane.getComponentCount(); i++ ) {
            DayScheduleScrollPanel currentTab = (DayScheduleScrollPanel) scheduleTabPane.getComponentAt( i );

            if ( !currentTab.checkStatus() ) {
                result = false;
            }
        }

        return result;
    }

    /**
     * autoCorrect
     *
     * Automatically corrects all the schedules in conflict.
     *
     * @return void.
     */
    private void autoCorrect () {
        for ( int i = 0; i < scheduleTabPane.getComponentCount(); i++ ) {
            DayScheduleScrollPanel currentTab = (DayScheduleScrollPanel) scheduleTabPane.getComponentAt( i );
            currentTab.autoCorrect();
        }
    }

    /**
     * addSong
     *
     * Passes addSong message to the current DayScheduleScrollPanel.
     *
     * @param song - The song to be added.
     */
    public void addSong ( Song song ) {
        DayScheduleScrollPanel currentTab = (DayScheduleScrollPanel) scheduleTabPane.getSelectedComponent();

        try {
            currentTab.addSong( song );
        } catch ( Exception exp ) {
            System.out.println( exp.getMessage() );
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleTabPane = new javax.swing.JTabbedPane();
        deleteButton = new javax.swing.JButton();
        addSongButton = new javax.swing.JButton();
        generateScheduleButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        deleteButton.setText("Delete Selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addSongButton.setText("Add Song");
        addSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongButtonActionPerformed(evt);
            }
        });

        generateScheduleButton.setText("Generate Schedule");
        generateScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateScheduleButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(deleteButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addSongButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(generateScheduleButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(doneButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(scheduleTabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                        .add(17, 17, 17))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scheduleTabPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 437, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(deleteButton)
                    .add(addSongButton)
                    .add(generateScheduleButton)
                    .add(doneButton))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * deleteButtonActionPerformed
     *
     * Sends a message to the current DayScheduleScrollPanel to delete selected songs.
     * 
     * @param evt
     */
    private void deleteButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        DayScheduleScrollPanel currentTab = (DayScheduleScrollPanel) scheduleTabPane.getSelectedComponent();
        currentTab.deleteSelectedSongs();
}//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * doneButtonActionPerformed
     *
     * Checks all the DayTreeScrollPanels for conflicts.
     *
     * If any panels are invalid, presents the user with the option to fix the
     * errors automatically or fix it themselves.
     *
     * If all the panels are good, commits the information to the database.
     *
     * @param evt
     */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed

        if ( !checkSchedules() ) {
            int result = JOptionPane.showConfirmDialog( this, "There are schedules which are either too long or too short.  " +
                    "Would you like the system to fix this?", "Schedule Error", JOptionPane.YES_NO_OPTION );

            if ( result == 0 ) {
                autoCorrect();
            }
        } else {
            songScheduler.commit();
            this.setVisible( false );
            this.dispose();
            if ( parentWindow != null ) {
                parentWindow.setVisible( true );
            } else {
                System.exit( 0 );
            }
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    /**
     * addSongButtonActionPerformed
     *
     * Presents the user with a SongBrowserWindow to select a song to add.
     * When a user selects a song, the SongBrowserWindow calls this.addSong()
     * which adds the song to the current schedule.
     * 
     * @param evt
     */
    private void addSongButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongButtonActionPerformed
        new SongBrowserWindow( this ).setVisible( true );
        this.setVisible( false );
    }//GEN-LAST:event_addSongButtonActionPerformed

    /**
     * generateScheduleButtonActionPerformed
     *
     * Automatically generates schedules for each selected hour in current
     * DayScheduleScrollPanel.
     * 
     * @param evt
     */
    private void generateScheduleButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateScheduleButtonActionPerformed
        // Get the current tab, and tell it to generate schedules
        DayScheduleScrollPanel currentTab = (DayScheduleScrollPanel) scheduleTabPane.getSelectedComponent();

        try {
            currentTab.generateSchedules();
        } catch ( Exception exp ) {
            System.out.println( exp.getMessage() );
            exp.printStackTrace();
        }
}//GEN-LAST:event_generateScheduleButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSongButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generateScheduleButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane scheduleTabPane;
    // End of variables declaration//GEN-END:variables
}
